Python Inheritance :
- Inheritance allows us to define a class that inherits all the methods and properties from another class.
- Parent class is the class being inherited from, also called base class.
- Child class is the class that inherits from another class, also called derived class.


Create a Parent Class :
- Any class can be a parent class, so the syntax is the same as creating any other class
- Create a class named Person, with firstname and lastname properties, and a printname method

> Eg-1 :

class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    print(self.firstname, self.lastname)

#Use the Person class to create an object

x = Person("John", "Doe")
print(x)   # John Doe


Create a Child Class :
- To create a class that inherits the functionality from another class, send the parent class as a parameter when creating the child class
- Create a class named Student, which will inherit the properties and methods from the Person class


> Eg-2 :

class Student(Person):
  pass      # Use the pass keyword when you do not want to add any other properties or methods to the class.
  
  
> Eg-3 :

class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

class Student(Person):
  pass

x = Student("Mike", "Olsen")
x.printname()



Use the super() Function : Python also has a super() function that will make the child class inherit all the methods and properties from its parent:


> Eg-4 : By using the super() function, you do not have to use the name of the parent element, it will automatically inherit the methods and properties from its parent.

class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
  def printname(self):
    print(self.firstname, self.lastname)
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
x = Student("Mike", "Olsen")
x.printname()


Add Properties:
- Add a property called graduationyear to the Student class

> Eg-5 :

class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019



> Eg-6 : In the example below, the year 2019 should be a variable, and passed into the Student class when creating student objects. To do so, add another parameter in the __init__() function:

Add a year parameter, and pass the correct year when creating objects:

class Student(Person):
  def __init__(self, fname, lname, year):
    super().__init__(fname, lname)
    self.graduationyear = year

x = Student("Mike", "Olsen", 2019)   # 2019


> Eg-7 : Add Methods
Add a method called welcome to the Student class:

class Student(Person):
  def __init__(self, fname, lname, year):
    super().__init__(fname, lname)
    self.graduationyear = year

  def welcome(self):
    print("Welcome", self.firstname, self.lastname, "to the class of", self.graduationyear)     # Welcome Mike Olsen to the class of 2019
