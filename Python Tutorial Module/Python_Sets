SETS : myset = {"apple", "banana", "cherry"}

Set :
- Sets are used to store multiple items in a single variable.
- Set is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Tuple, and Dictionary, all with different qualities and usage.
- A set is a collection which is unordered, unchangeable*, and unindexed.
- Sets are written with curly brackets.

> Eg-1 : Create a Set:

thisset = {"apple", "banana", "cherry"}
print(thisset)

- Duplicates Not Allowed
- Sets cannot have two items with the same value.
- ExampleGet your own Python Server
- Duplicate values will be ignored

thisset = {"apple", "banana", "cherry", "apple"}
print(thisset)

> Eg2 : True and 1 is considered the same value:

thisset = {"apple", "banana", "cherry", True, 1, 2}
print(thisset)


Get the Length of a Set : To determine how many items a set has, use the len() function.

- Get the number of items in a set:

thisset = {"apple", "banana", "cherry"}
print(len(thisset))



Set Items - Data Types :
- Set items can be of any data type:
- String, int and boolean data types:


> Eg-3:

set1 = {"apple", "banana", "cherry"}
set2 = {1, 5, 7, 9, 3}
set3 = {True, False, False}


> Eg-4:

set1 = {"abc", 34, True, 40, "male"}
print(set1)   # {"abc", 34, True, 40, "male"}

type() : From Python's perspective, sets are defined as objects with the data type 'set':

myset = {"apple", "banana", "cherry"}
print(type(myset))


The set() Constructor : It is also possible to use the set() constructor to make a set.
- Using the set() constructor to make a set:

> Eg-5 :

thisset = set(("apple", "banana", "cherry")) # note the double round-brackets
print(thisset)
# Note: the set list is unordered, so the result will display the items in a random order.  # {'apple', 'banana', 'cherry'}



